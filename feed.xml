<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://raina-rise.github.io/gaia-release/feed.xml" rel="self" type="application/atom+xml" /><link href="https://raina-rise.github.io/gaia-release/" rel="alternate" type="text/html" /><updated>2025-02-06T08:45:18+00:00</updated><id>https://raina-rise.github.io/gaia-release/feed.xml</id><title type="html">Gaia release</title><subtitle>Gaia是一个高性能的几何渲染引擎,分为服务端渲染和客户端渲染两部分。 服务端渲染引擎负责快速的图形渲染; 客户端渲染引擎负责图形的拼接处理操作,提供高效、灵活的渲染能力。</subtitle><entry><title type="html">Api Reference Server</title><link href="https://raina-rise.github.io/gaia-release/2025/02/06/api-reference-server.html" rel="alternate" type="text/html" title="Api Reference Server" /><published>2025-02-06T00:00:00+00:00</published><updated>2025-02-06T00:00:00+00:00</updated><id>https://raina-rise.github.io/gaia-release/2025/02/06/api-reference-server</id><content type="html" xml:base="https://raina-rise.github.io/gaia-release/2025/02/06/api-reference-server.html"><![CDATA[<h1 id="api使用说明">API使用说明</h1>
<ol>
  <li>
    <p>gaia实例创建
```
GaiaMgr gaiaMgr; // gaia实例管理器 
Gaia &amp;gaia = GaiaMgr::getGaiaInstance(gaiaId); // 创建gaia实例 
auto geometryMgr = gaia.getGeometryMgr(gaiaId); // 图元对象管理类 
GeometryFactory geometryFactory = gaia.getGeometryFactory(gaiaId); // 用于收集图元对象</p>
  </li>
  <li>自定义图元渲染对象
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geometryFactory.addRect(id: string, x: double, y: double, width: int, height: int, keepWidth: bool, lineWidth: double, rectType: STROKE | FILL, color: rgba, zIndex: int)
geometryFactory.addPath(id: string, fromX: double, fromY: double, toX: double, toY: double, keepWidth: bool, lineWidth: double, color: rgba, zIndex: int)
geometryFactory.addText(id: string, content: string, x: double, y: double, keepSize: bool, fontSize: int, zIndex: int)
geometryFactory.addImage(id: string, x: double, y: double, width: int, height: int， imageBase64: string, zIndex: int)
geometryFactory.addSvg(id: string, x: double, y: double, width: int, height: int，elementId: string, zIndex: int)
</code></pre></div>    </div>
  </li>
  <li>单核或多核渲染
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geometryMgr-&gt;renderWithSingleCore(level, indexList);
geometryMgr-&gt;renderWithMultiCore(level, indexList);
level: int (图像层级参数，level越大，图像越细节)
indexList: std::vector&lt;int&gt; (所需渲染瓦片索引值)
</code></pre></div>    </div>
    <p>单核或多核渲染方法返回每个瓦片图Base64格式字符串与瓦片图宽高信息。</p>
  </li>
  <li>销毁gaia实例
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gaia.destoryGeometryMgr(gaiaId)
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[API使用说明 gaia实例创建 ``` GaiaMgr gaiaMgr; // gaia实例管理器 Gaia &amp;gaia = GaiaMgr::getGaiaInstance(gaiaId); // 创建gaia实例 auto geometryMgr = gaia.getGeometryMgr(gaiaId); // 图元对象管理类 GeometryFactory geometryFactory = gaia.getGeometryFactory(gaiaId); // 用于收集图元对象 自定义图元渲染对象 geometryFactory.addRect(id: string, x: double, y: double, width: int, height: int, keepWidth: bool, lineWidth: double, rectType: STROKE | FILL, color: rgba, zIndex: int) geometryFactory.addPath(id: string, fromX: double, fromY: double, toX: double, toY: double, keepWidth: bool, lineWidth: double, color: rgba, zIndex: int) geometryFactory.addText(id: string, content: string, x: double, y: double, keepSize: bool, fontSize: int, zIndex: int) geometryFactory.addImage(id: string, x: double, y: double, width: int, height: int， imageBase64: string, zIndex: int) geometryFactory.addSvg(id: string, x: double, y: double, width: int, height: int，elementId: string, zIndex: int) 单核或多核渲染 geometryMgr-&gt;renderWithSingleCore(level, indexList); geometryMgr-&gt;renderWithMultiCore(level, indexList); level: int (图像层级参数，level越大，图像越细节) indexList: std::vector&lt;int&gt; (所需渲染瓦片索引值) 单核或多核渲染方法返回每个瓦片图Base64格式字符串与瓦片图宽高信息。]]></summary></entry><entry><title type="html">Overview Server</title><link href="https://raina-rise.github.io/gaia-release/2025/02/06/overview-server.html" rel="alternate" type="text/html" title="Overview Server" /><published>2025-02-06T00:00:00+00:00</published><updated>2025-02-06T00:00:00+00:00</updated><id>https://raina-rise.github.io/gaia-release/2025/02/06/overview-server</id><content type="html" xml:base="https://raina-rise.github.io/gaia-release/2025/02/06/overview-server.html"><![CDATA[<h1 id="简介">简介</h1>
<p>服务端渲染引擎支持rect、path、text、image、svg五种基础图元对象的渲染，支持单核渲染和多核渲染模式，提供高效的大规模图形渲染能力。</p>
<h1 id="使用说明">使用说明</h1>
<p>下载release页面的gaia-release.tar.gz压缩包，该压缩包包含项目的预编译文件，用户可以直接下载并使用这些文件进行开发或集成。 
压缩包gaia-release.tar.gz包含以下文件和目录：</p>
<ol>
  <li>include/文件夹
包含项目的所有头文件，用户可以将次目录添加到项目的包含路径中，用于调用项目的接口。</li>
  <li>lib/文件夹
包含项目的静态库文件，用户可以将此目录添加到项目的库路径中，用于链接项目库。</li>
</ol>

<p>将解压后的include文件夹和lib文件夹引入到项目中，如需渲染image或svg格式的图形，将对应图形数据文件放在include文件夹的同级目录下，即可完成渲染功能。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[简介 服务端渲染引擎支持rect、path、text、image、svg五种基础图元对象的渲染，支持单核渲染和多核渲染模式，提供高效的大规模图形渲染能力。 使用说明 下载release页面的gaia-release.tar.gz压缩包，该压缩包包含项目的预编译文件，用户可以直接下载并使用这些文件进行开发或集成。 压缩包gaia-release.tar.gz包含以下文件和目录： include/文件夹 包含项目的所有头文件，用户可以将次目录添加到项目的包含路径中，用于调用项目的接口。 lib/文件夹 包含项目的静态库文件，用户可以将此目录添加到项目的库路径中，用于链接项目库。]]></summary></entry></feed>