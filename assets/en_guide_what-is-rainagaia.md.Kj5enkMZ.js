import{_ as a,c as i,o as n,ag as r}from"./chunks/framework.Dx5c5edu.js";const t="/gaia-release/assets/work_diagram_en.DcJroYCk.png",u=JSON.parse('{"title":"What is Raina Gaia?","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/what-is-rainagaia.md","filePath":"en/guide/what-is-rainagaia.md"}'),s={name:"en/guide/what-is-rainagaia.md"};function o(l,e,c,d,g,p){return n(),i("div",null,e[0]||(e[0]=[r('<h1 id="what-is-raina-gaia" tabindex="-1">What is Raina Gaia? <a class="header-anchor" href="#what-is-raina-gaia" aria-label="Permalink to &quot;What is Raina Gaia?&quot;">​</a></h1><p><code>Raina Gaia</code> is a high-performance, large-scale graphics rendering and processing tool, composed of <strong>the server rendering engine</strong> <code>Gaia-server</code> and <strong>the client rendering engine</strong> <code>Gaia-client</code>. Together, they provide users with a smooth graphics rendering and interactive experience.</p><p><code>Gaia-server</code> is the server rendering engine of <code>Raina Gaia</code>, designed to address the performance bottlenecks of large-scale graphics rendering on the client, offering efficient and flexible rendering capabilities.</p><p><code>Gaia-client</code> is the client rendering engine of <code>Raina Gaia</code>, aimed at processing the rendering results returned by the server, providing functionalities such as tile stitching and graphic interaction.</p><div class="tip custom-block" style="padding-top:8px;"><p>Just want to try it out？Skip to the <a href="./quick-start.html">Quickstart</a>。</p></div><p><strong>Workflow Diagram</strong><img src="'+t+'" alt="work_diagram"></p><div class="tip custom-block"><p class="custom-block-title">Process Description</p><p><strong>1. Client Request</strong> The client sends a rendering request to the server.<br><strong>2. Server Rendering Engine</strong> The server generates tile maps based on the client&#39;s request and returns the rendering results.<br><strong>3. Client Rendering Engine</strong> The client synthesizes the tile maps into the final graphic display and supports graphic interaction functions.</p></div><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><ul><li><p><strong>Server Rendering Engine</strong> <a href="./server-use-cases.html">Use Cases</a>:</p><ul><li>Complex Data Visualization</li><li>Large-Scale Map Rendering</li><li>2D Game Scene</li></ul></li><li><p><strong>Client Rendering Engine</strong> <a href="./client-use-cases.html">Use Cases</a>:</p><ul><li>Interactive and Display of Online Maps</li><li>Graphical I Interaction in Data Visualization Tools</li><li>Graphic Editing Tools</li><li>2D Game Graphics Display and User Interaction</li></ul><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><p>Unlike traditional rendering engines, Raina Gaia utilizes a server multi-core rendering model, effectively resolving the performance bottlenecks in large-scale complex graphics rendering. The following are the core advantages of Raina Gaia in terms of performance:</p><ul><li><strong>Multi-core Rendering Mode</strong><br><code>Raina Gaia</code> fully leverages the computing power of multi-core CPUs, using a tile-based design approach to distribute rendering tasks across multiple cores for parallel processing, significantly improving rendering speed. Whether it&#39;s rendering millions or billions of graphical data points, it can efficiently complete the task.</li><li><strong>Incremental Update</strong><br><code>Raina Gaia</code> supports incremental updates, rendering only the parts that have changed, avoiding unnecessary calculations and resource consumption.</li><li><strong>Multi-level Rendering</strong><br><code>Raina Gaia</code> supports multi-level rendering, dynamically adjusting the rendering details based on user actions. The client caching mechanism ensures a smooth interactive experience.</li></ul></li></ul>',9)]))}const m=a(s,[["render",o]]);export{u as __pageData,m as default};
