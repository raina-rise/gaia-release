import{_ as a,c as r,o,ag as t}from"./chunks/framework.Dx5c5edu.js";const u=JSON.parse('{"title":"解决的问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/server-problem-solved.md","filePath":"guide/server-problem-solved.md"}'),l={name:"guide/server-problem-solved.md"};function i(s,e,n,d,c,_){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题&quot;">​</a></h1><p><code>Gaia-server</code>旨在解决客户端渲染大规模图形时的性能瓶颈问题，通过服务端渲染和瓦片图设计，实现以下目标：</p><h2 id="_1-高效渲染" tabindex="-1">1. 高效渲染 <a class="header-anchor" href="#_1-高效渲染" aria-label="Permalink to &quot;1. 高效渲染&quot;">​</a></h2><ul><li><strong>问题</strong>：客户端渲染大规模图形时，计算压力大，渲染速度慢。</li><li><strong>解决方案</strong>： <code>Gaia-server</code>将渲染任务转移到服务端，利用高性能计算资源，显著提升渲染速度。</li></ul><h2 id="_2-高分辨率支持" tabindex="-1">2. 高分辨率支持 <a class="header-anchor" href="#_2-高分辨率支持" aria-label="Permalink to &quot;2. 高分辨率支持&quot;">​</a></h2><ul><li><strong>问题</strong>：在高分辨率场景下，客户端容易出现性能瓶颈，导致渲染效果不佳。</li><li><strong>解决方案</strong>：<code>Gaia-server</code>支持多层级渲染，用户可以根据需求选择不同的层级，优化渲染效果与性能。</li></ul><h2 id="_3-灵活更新" tabindex="-1">3. 灵活更新 <a class="header-anchor" href="#_3-灵活更新" aria-label="Permalink to &quot;3. 灵活更新&quot;">​</a></h2><ul><li><strong>问题</strong>：传统的渲染方式在每次图片内容变化时，需要重新渲染整个图形，造成资源浪费。</li><li><strong>解决方案</strong>：<code>Gaia-server</code>支持瓦片渲染，仅对内容有变化的区域进行更新，避免不必要的资源消耗。</li></ul><h2 id="_4-多核优化" tabindex="-1">4. 多核优化 <a class="header-anchor" href="#_4-多核优化" aria-label="Permalink to &quot;4. 多核优化&quot;">​</a></h2><ul><li><strong>问题</strong>：单线程渲染无法充分利用现代多核 CPU 的计算能力。</li><li><strong>解决方案</strong>：<code>Gaia-server</code>支持多核渲染模式，充分利用多核 CPU 的并行计算能力，提升渲染性能。</li></ul>',10)]))}const g=a(l,[["render",i]]);export{u as __pageData,g as default};
