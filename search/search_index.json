{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6982\u8ff0 raina-gaia \u662f\u4e00\u6b3e\u9ad8\u6027\u80fd\u5927\u89c4\u6a21\u56fe\u5f62\u6e32\u67d3\u5de5\u5177\uff0c\u7531\u670d\u52a1\u7aef\u6e32\u67d3\u5f15\u64ce\u548c\u5ba2\u6237\u7aef\u6e32\u67d3\u5f15\u64ce\u7ec4\u6210\uff0c\u63d0\u4f9b\u9ad8\u6548\u3001\u7075\u6d3b\u7684\u6e32\u67d3\u80fd\u529b\u3002 raina-gaia \u652f\u6301 \u77e9\u5f62(rect) \u3001 \u8def\u5f84(path) \u3001 \u6587\u672c(text) \u3001 \u56fe\u7247(image) \u6216 svg \u4e94\u79cd\u57fa\u7840\u56fe\u5143\u5bf9\u8c61\u7684\u6e32\u67d3\uff0c\u652f\u6301\u5355\u6838\u6e32\u67d3\u548c\u591a\u6838\u6e32\u67d3\u6a21\u5f0f\u3002 raina-gaia \u9700\u8981\u7528\u6237\u63d0\u4f9b\u6e32\u67d3\u56fe\u5143\u7684\u6570\u636e\u4fe1\u606f\uff0c\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 \u77e9\u5f62(rect) \u3001 \u8def\u5f84(path) \u3001 \u6587\u672c(text) \u3001 \u56fe\u7247(image) \u6216 svg \u5c5e\u6027\u4fe1\u606f\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u6e32\u67d3\u56fe\uff0c\u793a\u4f8b\u6e32\u67d3\u56fe\u5982\u4e0b\uff1a","title":"Overview"},{"location":"#_1","text":"raina-gaia \u662f\u4e00\u6b3e\u9ad8\u6027\u80fd\u5927\u89c4\u6a21\u56fe\u5f62\u6e32\u67d3\u5de5\u5177\uff0c\u7531\u670d\u52a1\u7aef\u6e32\u67d3\u5f15\u64ce\u548c\u5ba2\u6237\u7aef\u6e32\u67d3\u5f15\u64ce\u7ec4\u6210\uff0c\u63d0\u4f9b\u9ad8\u6548\u3001\u7075\u6d3b\u7684\u6e32\u67d3\u80fd\u529b\u3002 raina-gaia \u652f\u6301 \u77e9\u5f62(rect) \u3001 \u8def\u5f84(path) \u3001 \u6587\u672c(text) \u3001 \u56fe\u7247(image) \u6216 svg \u4e94\u79cd\u57fa\u7840\u56fe\u5143\u5bf9\u8c61\u7684\u6e32\u67d3\uff0c\u652f\u6301\u5355\u6838\u6e32\u67d3\u548c\u591a\u6838\u6e32\u67d3\u6a21\u5f0f\u3002 raina-gaia \u9700\u8981\u7528\u6237\u63d0\u4f9b\u6e32\u67d3\u56fe\u5143\u7684\u6570\u636e\u4fe1\u606f\uff0c\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 \u77e9\u5f62(rect) \u3001 \u8def\u5f84(path) \u3001 \u6587\u672c(text) \u3001 \u56fe\u7247(image) \u6216 svg \u5c5e\u6027\u4fe1\u606f\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u6e32\u67d3\u56fe\uff0c\u793a\u4f8b\u6e32\u67d3\u56fe\u5982\u4e0b\uff1a","title":"\u6982\u8ff0"},{"location":"about/","text":"\u53d1\u884c\u8bf4\u660e Version 1.0.0 (2024.12.20)","title":"About"},{"location":"about/#_1","text":"","title":"\u53d1\u884c\u8bf4\u660e"},{"location":"about/#version-100-20241220","text":"","title":"Version 1.0.0 (2024.12.20)"},{"location":"server/api_reference/","text":"API \u4f7f\u7528\u8bf4\u660e \u8c03\u7528\u793a\u4f8b #include \"Gaia.h\" #include \"Util.h\" // \u5165\u53c2\uff1alevel\u3001gaiaId\u3001indexList\u3001isSingleCore int level; int gaiaId; std::vector<int> indexList; bool isSingleCore = true; Gaia &gaia = Gaia::getInstance(gaiaId); // \u8be5\u793a\u4f8b\u6e32\u67d3\u6570\u636e\u4eceschematic\u4e2d\u83b7\u53d6\uff0c\u7528\u6237\u53ef\u6839\u636e\u9700\u6c42\u81ea\u5b9a\u4e49 json imagesData; auto *hirTreeRoot = GuiManager::GetInstance().GetHircTreeRoot(); if (hirTreeRoot == nullptr) { GUI_INFO(\"hirc tree root is null\"); return json::object(); } std::string hierarchyTitle = reqJson.at(\"hierarchyTitle\"); HircTreeNode *node = hirTreeRoot->findNode(hierarchyTitle); auto *hInstance = node->getHInst(); if (hInstance != nullptr) { ApiSchematic apiSchematic(hInstance); auto graph = apiSchematic.runSchematicV2(); for (auto &node : graph->getNodes()) { if (node->getProto()->libcell.empty()) { gaia.addRect(node->name, node->getPos().x, node->getPos().y, static_cast<int>(std::floor(node->getSize().x)),static_cast<int>(std::floor(node->getSize().y))); if (!node->isDummy) { geometryFactory.addText(node->name, node->name, node->getPos().x + 2, node->getPos().y + 2); } } else { gaia.addSvg(node->name, node->getPos().x, node->getPos().y,static_cast<int>(std::floor(node->getSize().x)), static_cast<int>(std::floor(node->getSize().y)), node->getProto()->libcell); geometryFactory.addText(node->name, node->name, node->getPos().x + 2, node->getPos().y + 2); } } int lineId = 0; for (auto &edge : graph->getEdges()) { auto startPoint = edge->getSrcPoint(); for (auto &nextPoint : edge->getBendPoints()) { gaia.addPath(std::to_string(lineId), startPoint.x, startPoint.y, nextPoint.x, nextPoint.y); lineId++; startPoint = nextPoint; } gaia.addPath(std::to_string(lineId), startPoint.x, startPoint.y, edge->getDstPoint().x, edge->getDstPoint().y); lineId++; } } RenderResult result; if (isSingleCore) { // \u5355\u6838 result = gaia.renderWithSingleCore(level, indexList); } else { // \u591a\u6838 result = gaia.renderWithMultiCore(level, indexList); } for (const auto &blockRes : result.blocksRes) { int index = blockRes.first; std::string base64Str = blockRes.second; imagesData.push_back({{\"index\", index}, {\"blockBase64Str\",base64Str}}); } \u8be6\u7ec6\u8bf4\u660e gaia \u5b9e\u4f8b\u521b\u5efa GaiaMgr gaiaMgr; // gaia\u5b9e\u4f8b\u7ba1\u7406\u5668 Gaia &gaia = GaiaMgr::getGaiaInstance(gaiaId); // \u521b\u5efagaia\u5b9e\u4f8b auto geometryMgr = gaia.getGeometryMgr(gaiaId); // \u56fe\u5143\u5bf9\u8c61\u7ba1\u7406\u7c7b GeometryFactory geometryFactory = gaia.getGeometryFactory(gaiaId); // \u7528\u4e8e\u6536\u96c6\u56fe\u5143\u5bf9\u8c61 \u81ea\u5b9a\u4e49\u56fe\u5143\u6e32\u67d3\u5bf9\u8c61 geometryFactory.addRect(id: string, x: double, y: double, width: int, height: int, keepWidth: bool, lineWidth: double, rectType: STROKE | FILL, color: rgba, zIndex: int) geometryFactory.addPath(id: string, fromX: double, fromY: double, toX: double, toY: double, keepWidth: bool, lineWidth: double, color: rgba, zIndex: int) geometryFactory.addText(id: string, content: string, x: double, y: double, keepSize: bool, fontSize: int, zIndex: int) geometryFactory.addImage(id: string, x: double, y: double, width: int, height: int\uff0c imageBase64: string, zIndex: int) geometryFactory.addSvg(id: string, x: double, y: double, width: int, height: int\uff0celementId: string, zIndex: int) \u5355\u6838\u6216\u591a\u6838\u6e32\u67d3 geometryMgr->renderWithSingleCore(level, indexList); geometryMgr->renderWithMultiCore(level, indexList); // level: int (\u56fe\u50cf\u5c42\u7ea7\u53c2\u6570\uff0clevel\u8d8a\u5927\uff0c\u56fe\u50cf\u8d8a\u7ec6\u8282) // indexList: std::vector<int> (\u6240\u9700\u6e32\u67d3\u74e6\u7247\u7d22\u5f15\u503c) \u5355\u6838\u6216\u591a\u6838\u6e32\u67d3\u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e2a\u74e6\u7247\u56fe Base64 \u683c\u5f0f\u5b57\u7b26\u4e32\u4e0e\u74e6\u7247\u56fe\u5bbd\u9ad8\u4fe1\u606f\u3002 \u9500\u6bc1 gaia \u5b9e\u4f8b gaia.destoryGeometryMgr(gaiaId)","title":"API Reference"},{"location":"server/api_reference/#api","text":"","title":"API \u4f7f\u7528\u8bf4\u660e"},{"location":"server/api_reference/#_1","text":"#include \"Gaia.h\" #include \"Util.h\" // \u5165\u53c2\uff1alevel\u3001gaiaId\u3001indexList\u3001isSingleCore int level; int gaiaId; std::vector<int> indexList; bool isSingleCore = true; Gaia &gaia = Gaia::getInstance(gaiaId); // \u8be5\u793a\u4f8b\u6e32\u67d3\u6570\u636e\u4eceschematic\u4e2d\u83b7\u53d6\uff0c\u7528\u6237\u53ef\u6839\u636e\u9700\u6c42\u81ea\u5b9a\u4e49 json imagesData; auto *hirTreeRoot = GuiManager::GetInstance().GetHircTreeRoot(); if (hirTreeRoot == nullptr) { GUI_INFO(\"hirc tree root is null\"); return json::object(); } std::string hierarchyTitle = reqJson.at(\"hierarchyTitle\"); HircTreeNode *node = hirTreeRoot->findNode(hierarchyTitle); auto *hInstance = node->getHInst(); if (hInstance != nullptr) { ApiSchematic apiSchematic(hInstance); auto graph = apiSchematic.runSchematicV2(); for (auto &node : graph->getNodes()) { if (node->getProto()->libcell.empty()) { gaia.addRect(node->name, node->getPos().x, node->getPos().y, static_cast<int>(std::floor(node->getSize().x)),static_cast<int>(std::floor(node->getSize().y))); if (!node->isDummy) { geometryFactory.addText(node->name, node->name, node->getPos().x + 2, node->getPos().y + 2); } } else { gaia.addSvg(node->name, node->getPos().x, node->getPos().y,static_cast<int>(std::floor(node->getSize().x)), static_cast<int>(std::floor(node->getSize().y)), node->getProto()->libcell); geometryFactory.addText(node->name, node->name, node->getPos().x + 2, node->getPos().y + 2); } } int lineId = 0; for (auto &edge : graph->getEdges()) { auto startPoint = edge->getSrcPoint(); for (auto &nextPoint : edge->getBendPoints()) { gaia.addPath(std::to_string(lineId), startPoint.x, startPoint.y, nextPoint.x, nextPoint.y); lineId++; startPoint = nextPoint; } gaia.addPath(std::to_string(lineId), startPoint.x, startPoint.y, edge->getDstPoint().x, edge->getDstPoint().y); lineId++; } } RenderResult result; if (isSingleCore) { // \u5355\u6838 result = gaia.renderWithSingleCore(level, indexList); } else { // \u591a\u6838 result = gaia.renderWithMultiCore(level, indexList); } for (const auto &blockRes : result.blocksRes) { int index = blockRes.first; std::string base64Str = blockRes.second; imagesData.push_back({{\"index\", index}, {\"blockBase64Str\",base64Str}}); }","title":"\u8c03\u7528\u793a\u4f8b"},{"location":"server/api_reference/#_2","text":"","title":"\u8be6\u7ec6\u8bf4\u660e"},{"location":"server/api_reference/#gaia","text":"GaiaMgr gaiaMgr; // gaia\u5b9e\u4f8b\u7ba1\u7406\u5668 Gaia &gaia = GaiaMgr::getGaiaInstance(gaiaId); // \u521b\u5efagaia\u5b9e\u4f8b auto geometryMgr = gaia.getGeometryMgr(gaiaId); // \u56fe\u5143\u5bf9\u8c61\u7ba1\u7406\u7c7b GeometryFactory geometryFactory = gaia.getGeometryFactory(gaiaId); // \u7528\u4e8e\u6536\u96c6\u56fe\u5143\u5bf9\u8c61","title":"gaia \u5b9e\u4f8b\u521b\u5efa"},{"location":"server/api_reference/#_3","text":"geometryFactory.addRect(id: string, x: double, y: double, width: int, height: int, keepWidth: bool, lineWidth: double, rectType: STROKE | FILL, color: rgba, zIndex: int) geometryFactory.addPath(id: string, fromX: double, fromY: double, toX: double, toY: double, keepWidth: bool, lineWidth: double, color: rgba, zIndex: int) geometryFactory.addText(id: string, content: string, x: double, y: double, keepSize: bool, fontSize: int, zIndex: int) geometryFactory.addImage(id: string, x: double, y: double, width: int, height: int\uff0c imageBase64: string, zIndex: int) geometryFactory.addSvg(id: string, x: double, y: double, width: int, height: int\uff0celementId: string, zIndex: int)","title":"\u81ea\u5b9a\u4e49\u56fe\u5143\u6e32\u67d3\u5bf9\u8c61"},{"location":"server/api_reference/#_4","text":"geometryMgr->renderWithSingleCore(level, indexList); geometryMgr->renderWithMultiCore(level, indexList); // level: int (\u56fe\u50cf\u5c42\u7ea7\u53c2\u6570\uff0clevel\u8d8a\u5927\uff0c\u56fe\u50cf\u8d8a\u7ec6\u8282) // indexList: std::vector<int> (\u6240\u9700\u6e32\u67d3\u74e6\u7247\u7d22\u5f15\u503c) \u5355\u6838\u6216\u591a\u6838\u6e32\u67d3\u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e2a\u74e6\u7247\u56fe Base64 \u683c\u5f0f\u5b57\u7b26\u4e32\u4e0e\u74e6\u7247\u56fe\u5bbd\u9ad8\u4fe1\u606f\u3002","title":"\u5355\u6838\u6216\u591a\u6838\u6e32\u67d3"},{"location":"server/api_reference/#gaia_1","text":"gaia.destoryGeometryMgr(gaiaId)","title":"\u9500\u6bc1 gaia \u5b9e\u4f8b"},{"location":"server/other_notes/","text":"\u5176\u4ed6\u8bf4\u660e svg \u6587\u4ef6\u5f15\u5165\u8bf4\u660e","title":"Other Notes"},{"location":"server/other_notes/#_1","text":"","title":"\u5176\u4ed6\u8bf4\u660e"},{"location":"server/other_notes/#svg","text":"","title":"svg \u6587\u4ef6\u5f15\u5165\u8bf4\u660e"},{"location":"server/quick_start/","text":"\u5feb\u901f\u5f00\u59cb \u4e0b\u8f7d\u94fe\u63a5","title":"Quick Start"},{"location":"server/quick_start/#_1","text":"\u4e0b\u8f7d\u94fe\u63a5","title":"\u5feb\u901f\u5f00\u59cb"}]}